{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 9,
    "pending": 0,
    "failures": 1,
    "start": "2024-07-28T17:42:25.555Z",
    "end": "2024-07-28T17:42:52.762Z",
    "duration": 27207,
    "testsRegistered": 10,
    "passPercent": 90,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d39c0414-8bc9-4dd3-aeda-8ba55d6be3e6",
      "title": "",
      "fullFile": "C:\\Workspace\\Selenium\\LambdaTest\\Demo\\test\\assessmentTest.js",
      "file": "\\test\\assessmentTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4c88b9e6-65cd-4897-a475-4d14e234014f",
          "title": "Automation Test",
          "fullFile": "C:\\Workspace\\Selenium\\LambdaTest\\Demo\\test\\assessmentTest.js",
          "file": "\\test\\assessmentTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Automation Test\"",
              "fullTitle": "Automation Test \"before all\" hook in \"Automation Test\"",
              "timedOut": null,
              "duration": 24820,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "driver = await new Builder().forBrowser('firefox').build();\n    await driver.get('https://rahulshettyacademy.com/AutomationPractice/');",
              "err": {},
              "uuid": "510beae4-9fed-4b0d-a88e-0a658611a5e2",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check radio button 3 and validate only one is checked",
              "fullTitle": "Automation Test should check radio button 3 and validate only one is checked",
              "timedOut": null,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const radioButton = await driver.findElement(By.css('#radio-btn-example > fieldset:nth-child(1) > label:nth-child(4) > input:nth-child(1)'));\n await radioButton.click();\n const radioButtons = await driver.findElements(By.name('radioButton'));\n const isOnlyOneChecked = await isOnlyOneRadioButtonChecked(radioButtons);\n assert.strictEqual(isOnlyOneChecked, true, 'Only one radio button should be checked');\n const isThirdChecked = await radioButton.isSelected();\n assert.strictEqual(isThirdChecked, true, 'The third radio button should be checked');",
              "err": {},
              "uuid": "3627a15a-abcf-4895-85d3-a6c38c6f9e29",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check radio button 2 and validate only one is checked",
              "fullTitle": "Automation Test should check radio button 2 and validate only one is checked",
              "timedOut": null,
              "duration": 247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const radioButton = await driver.findElement(By.css('#radio-btn-example > fieldset:nth-child(1) > label:nth-child(3) > input:nth-child(1)'));\n await radioButton.click();\n const radioButtons = await driver.findElements(By.name('radioButton'));\n const isOnlyOneChecked = await isOnlyOneRadioButtonChecked(radioButtons);\n assert.strictEqual(isOnlyOneChecked, true, 'Only one radio button should be checked');\n const isSecondChecked = await radioButton.isSelected();\n assert.strictEqual(isSecondChecked, true, 'The second radio button should be checked');",
              "err": {},
              "uuid": "e95404c8-12c3-4333-ac21-4fb49c6ffef3",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should type \"South\" and select \"South Africa\" from suggestions",
              "fullTitle": "Automation Test should type \"South\" and select \"South Africa\" from suggestions",
              "timedOut": null,
              "duration": 69,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Type \"South\" into the suggestion field\n  const suggestionField = await driver.findElement(By.css('#autocomplete'));\n  await suggestionField.sendKeys('South');\n  // Wait for suggestions to appear and select \"South Africa\"\n  await driver.wait(until.elementLocated(By.css('#ui-id-1')), 5000);\n  \n  const suggestions = await driver.findElements(By.xpath('//*[@id=\"ui-id-3\"]'));\n  if (suggestions.length > 0) {\n    // Find and click \"South Africa\"\n    for (let suggestion of suggestions) {\n        const text = await suggestion.getText();\n        if (text === 'South Africa') {\n          await suggestion.click();\n          break;\n      }\n    }\n    // Validate the selection\n    const selectedValue = await suggestionField.getAttribute('value');\n    assert.strictEqual(selectedValue, 'South Africa', 'The selected suggestion should be \"South Africa\"');\n} else {\n    throw new Error('No suggestions found');\n}",
              "err": {
                "message": "Error: No suggestions found",
                "estack": "Error: No suggestions found\n    at Context.<anonymous> (test\\assessmentTest.js:89:11)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b6bb592b-bc97-4b60-ba9d-6801f32b0a5f",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check all checkboxes and validate they are all checked",
              "fullTitle": "Automation Test should check all checkboxes and validate they are all checked",
              "timedOut": null,
              "duration": 694,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const checkboxes = await driver.findElements(By.xpath('//input[@type=\"checkbox\" and starts-with(@id,\"checkBoxOption\")]'));\n        // Check all checkboxes\n        for (let checkbox of checkboxes) {\n            if (!(await checkbox.isSelected())) {\n                await checkbox.click();\n            }\n        }\n        for (let checkbox of checkboxes) {\n          assert.strictEqual(await checkbox.isSelected(), true, 'Checkbox should be checked');\n      }",
              "err": {},
              "uuid": "c2cf6b78-c267-4da2-af6e-c83d95619c2a",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should uncheck the first checkbox and validate the other two remain checked",
              "fullTitle": "Automation Test should uncheck the first checkbox and validate the other two remain checked",
              "timedOut": null,
              "duration": 241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Find all checkboxes matching the XPath selector\nconst checkboxes = await driver.findElements(By.xpath('//input[@type=\"checkbox\" and starts-with(@id,\"checkBoxOption\")]'));\n// Uncheck the first checkbox\nif (await checkboxes[0].isSelected()) {\n    await checkboxes[0].click();\n}\n// Validate the first checkbox is unchecked\nassert.strictEqual(await checkboxes[0].isSelected(), false, 'First checkbox should be unchecked');\n// Validate the other checkboxes are still checked\nfor (let i = 1; i < checkboxes.length; i++) {\n    assert.strictEqual(await checkboxes[i].isSelected(), true, `Checkbox ${i + 1} should be checked`);\n}",
              "err": {},
              "uuid": "64b68ed7-09c1-43df-b911-ad83635ff7af",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should hide the element when the hide button is clicked",
              "fullTitle": "Automation Test should hide the element when the hide button is clicked",
              "timedOut": null,
              "duration": 257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Find the hide button and the element to be hidden\n  const hideButton = await driver.findElement(By.css('#hide-textbox'));\n  const elementToHide = await driver.findElement(By.css('#displayed-text'));\n  // Click the hide button\n  await hideButton.click();\n  // Validate that the element is hidden\n  await driver.wait(until.elementIsNotVisible(elementToHide), 5000);\n  const isDisplayed = await elementToHide.isDisplayed();\n  assert.strictEqual(isDisplayed, false, 'The element should be hidden');",
              "err": {},
              "uuid": "4903d41d-0fdd-41a2-87e8-f59b88b4870f",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show the element when the show button is clicked",
              "fullTitle": "Automation Test should show the element when the show button is clicked",
              "timedOut": null,
              "duration": 239,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Find the show button and the element to be shown\n  const showButton = await driver.findElement(By.css('#show-textbox')); \n  const elementToShow = await driver.findElement(By.css('#displayed-text')); // Replace with the actual ID or selector\n  // Click the show button\n  await showButton.click();\n  // Validate that the element is shown\n  await driver.wait(until.elementIsVisible(elementToShow), 5000);\n  const isDisplayed = await elementToShow.isDisplayed();\n  assert.strictEqual(isDisplayed, true, 'The element should be shown');",
              "err": {},
              "uuid": "8ecbcab2-4879-4f76-955a-4c7c31004dd9",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate that the amount for 'Joe Postman' from 'Chennai' is 46",
              "fullTitle": "Automation Test should validate that the amount for 'Joe Postman' from 'Chennai' is 46",
              "timedOut": null,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Locate the row for Joe Postman from Chennai\n  const row = await driver.findElement(By.xpath(\"/html/body/div[3]/div[2]/fieldset[2]/div[1]/table/tbody/tr[6]/td[2]\"));\n  \n  // Get the amount from the located row\n  const amountCell = await row.findElement(By.xpath(\"/html/body/div[3]/div[2]/fieldset[2]/div[1]/table/tbody/tr[6]/td[4]\"));\n  const amount = await amountCell.getText();\n  \n  // Validate the amount\n  assert.strictEqual(amount, '46', \"The amount for 'Joe Postman' from 'Chennai' should be 46\");",
              "err": {},
              "uuid": "e852c1bb-e521-419e-b387-095bd268657e",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate that the total amount collected is 296",
              "fullTitle": "Automation Test should validate that the total amount collected is 296",
              "timedOut": null,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Get the total amount element\n  const totalAmountCell = await driver.findElement(By.css('.totalAmount'));\n  const totalAmount = await totalAmountCell.getText();\n  \n  // Validate the total amount\n  assert.strictEqual(totalAmount, 'Total Amount Collected: 296', 'The total amount collected should be 296');",
              "err": {},
              "uuid": "cd5e9474-c724-42a2-8b0b-b73935efe63f",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate that the page has an iframe",
              "fullTitle": "Automation Test should validate that the page has an iframe",
              "timedOut": null,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Find the iframe\n  const iframe = await driver.findElement(By.tagName('iframe'));\n  \n  // Validate that the iframe is present\n  assert.ok(iframe, 'The page should have an iframe');",
              "err": {},
              "uuid": "eb71e8fa-6bc2-4649-b4db-caf8e6cff92e",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3627a15a-abcf-4895-85d3-a6c38c6f9e29",
            "e95404c8-12c3-4333-ac21-4fb49c6ffef3",
            "c2cf6b78-c267-4da2-af6e-c83d95619c2a",
            "64b68ed7-09c1-43df-b911-ad83635ff7af",
            "4903d41d-0fdd-41a2-87e8-f59b88b4870f",
            "8ecbcab2-4879-4f76-955a-4c7c31004dd9",
            "e852c1bb-e521-419e-b387-095bd268657e",
            "cd5e9474-c724-42a2-8b0b-b73935efe63f",
            "eb71e8fa-6bc2-4649-b4db-caf8e6cff92e"
          ],
          "failures": [
            "b6bb592b-bc97-4b60-ba9d-6801f32b0a5f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2060,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testResults",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "C:/Workspace/Selenium/LambdaTest/Demo/testReports",
        "reportFilename": "testResults"
      },
      "version": "6.2.0"
    }
  }
}